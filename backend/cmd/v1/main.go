package main

import (
	"io"
	"log"
	"os"
	"time"

	// docs is generated by Swag CLI

	"pingvinchyk/backend/internal/db"
	"pingvinchyk/backend/internal/env"
	"pingvinchyk/backend/internal/handlers"
	"pingvinchyk/backend/internal/server"
	"pingvinchyk/backend/internal/services"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"

	_ "pingvinchyk/backend/cmd/v1/docs" // swag docs

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

// @title           Pingvinchyk API
// @version         1.0
// @description     Pingvinchyk API is a RESTful API for the Pingvinchyk application.
// @BasePath /api/v1

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

func main() {
	var (
		dsn = env.Must("POSTGRES_DSN")
	)

	f, err := os.Create("gin.log")
	gin.DefaultWriter = io.MultiWriter(f, os.Stdout)
	if err != nil {
		log.Fatalf("could not create log file: %v", err)
	}

	// Setting up connection with db
	var pgConnection = db.MustConnection(dsn)
	defer pgConnection.Close()

	var repository = db.MustRepository(pgConnection)
	defer repository.Close()

	// creating services
	var userService = services.NewUserService(repository)

	// creating handlers
	requestHandler := handlers.NewRequestHandler()
	authHandler := handlers.NewAuthHandler(userService)

	r := gin.Default()
	r.Use(cors.New(cors.Config{
		AllowAllOrigins:  true,
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization", "Accept"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	api := r.Group("/api/v1")
	{
		api.GET("/hello", requestHandler.HelloWorld)
	}

	auth := api.Group("/auth")
	{
		auth.POST("/register", authHandler.RegisterUser)
		auth.POST("/login", authHandler.LoginUser)
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	server.Run(r.Handler())
}
